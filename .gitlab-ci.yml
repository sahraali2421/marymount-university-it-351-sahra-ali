stages:
  - "Image Scanning"
  - validate
  - plan
  - apply
  - configure
  - "Dependency Check"
  - analyze
  - "Continuous Compliance"
  - destroy

.terraform_init: &terraform_init |-
  terraform init -backend-config="bucket=sahra-tf-state" -backend-config="region=us-east-1" -backend-config="key=terraform.tfstate"

trivy:
  stage: "Image Scanning"
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy -f json -o results-terraform.json image hashicorp/terraform
    - trivy -f json -o results-ansible.json image mullnerz/ansible-playbook
    - trivy -f json -o results-owasp.json image owasp/dependency-check
    - trivy -f json -o results-sonar.json image sonarsource/sonar-scanner-cli:latest
    - trivy -f json -o results-chef.json image chef/inspec   
  artifacts:
   when: always 
   name: trivy
   paths:
     - results-terraform.json
     - results-ansible.json
     - results-owasp.json
     - results-sonar.json
     - results-chef.json
  tags:
    - it-351-runner

tf-val:
  when: manual
  image: 
    name: hashicorp/terraform
    entrypoint: [""]
  stage: validate
  before_script:
    - *terraform_init
  script:
    - terraform validate
  tags:
    - it-351-runner

tf-plan:
  image: 
    name: hashicorp/terraform
    entrypoint: [""]
  stage: plan
  before_script:
    - *terraform_init
  script:
    - terraform plan -out=tfplan.plan
  artifacts:
    name: tf-plan
    paths:
      - tfplan.plan
  needs:
    - job: tf-val
  tags:
    - it-351-runner

tf-apply:
  image: 
    name: hashicorp/terraform
    entrypoint: [""]
  stage: apply
  before_script:
    - *terraform_init
  script:
    - terraform apply -auto-approve tfplan.plan
    - terraform output instance_ip >> ansible-hosts.yml
    - echo SONARQUBE_IP=$(terraform output --raw sonarqube_ip) >> sonarqube.env
  needs:
    - job: tf-plan
  rules:
    - when: manual
  artifacts:
    name: ansible-hosts
    paths: 
      - ansible-hosts.yml
    reports:
      dotenv: sonarqube.env
  tags:
    - it-351-runner

ansible:
  image:
    name: mullnerz/ansible-playbook
    entrypoint:  [""]
  stage: configure
  before_script:
    - chmod 0600 newkeypair.pem
  script:
    - ansible-playbook -i ansible-hosts.yml playbook.yml --key-file newkeypair.pem
  needs:
    - job: tf-apply
  tags:
    - it-351-runner

owasp-dc:
  allow_failure: true
  stage: "Dependency Check"
  image:
    name: owasp/dependency-check
    entrypoint: [""]
  script:
    - /usr/share/dependency-check/bin/dependency-check.sh --project Test --out . --scan . --enableExperimental --failOnCVSS 7 -f XML
  artifacts:
    when: always
    paths:
      - dependency-check-report.xml
    expire_in: 1 week
  tags:
    - it-351-runner

sonarqube:
  allow_failure: true
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: analyze
  needs:
    - job: tf-apply
      artifacts: true
    - job: owasp-dc
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0" 
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.host.url=http://${SONARQUBE_IP}:9000 -Dsonar.dependencyCheck.reportPath=dependency-check-report.xml
  only:
    - main
  tags:
    - it-351-runner

chef-inspec:
  stage: "Continuous Compliance"
  image:
    name: chef/inspec
    entrypoint: [""]
  script:
    - inspec detect -t aws:// --chef-license accept
    - inspec vendor lab-7-profile
    - inspec exec lab-7-profile -t aws://
  tags:
    - it-351-runner
    

tf-destroy:
  image: 
    name: hashicorp/terraform
    entrypoint: [""]
  stage: destroy
  before_script:
    - *terraform_init
  script:
    - terraform destroy -auto-approve
  needs:
    - job: tf-plan
  rules:
    - when: manual
  tags:
    - it-351-runner